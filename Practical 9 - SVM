{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Practical 8 - SVM","provenance":[],"collapsed_sections":[],"mount_file_id":"1yQCELvEju2jvyhtKojS5N-RVc2-LK9SA","authorship_tag":"ABX9TyO1d3dMxgqP8cv/VnWkKkr0"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"YM8Mf4kJF2CN","executionInfo":{"status":"ok","timestamp":1603267728985,"user_tz":-330,"elapsed":3045,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}}},"source":["from google.colab import drive"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"dWBgXDAaNFcO","executionInfo":{"status":"ok","timestamp":1603267796155,"user_tz":-330,"elapsed":3682,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}}},"source":["path=\"/content/drive/My Drive/CSV FILES/cell_samples.csv\""],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"0aZo3hJfNS5e","executionInfo":{"status":"ok","timestamp":1603267882941,"user_tz":-330,"elapsed":1188,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}}},"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"ivIxN6trNjSc","executionInfo":{"status":"ok","timestamp":1603268175234,"user_tz":-330,"elapsed":1298,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"84831fe0-2e2a-4efb-a902-6c3e72dc1de9","colab":{"base_uri":"https://localhost:8080/","height":234}},"source":["df=pd.read_csv(path)\n","print(df.head(10))"],"execution_count":5,"outputs":[{"output_type":"stream","text":["        ID  Clump  UnifSize  UnifShape  ...  BlandChrom  NormNucl Mit  Class\n","0  1000025      5         1          1  ...           3         1   1      2\n","1  1002945      5         4          4  ...           3         2   1      2\n","2  1015425      3         1          1  ...           3         1   1      2\n","3  1016277      6         8          8  ...           3         7   1      2\n","4  1017023      4         1          1  ...           3         1   1      2\n","5  1017122      8        10         10  ...           9         7   1      4\n","6  1018099      1         1          1  ...           3         1   1      2\n","7  1018561      2         1          2  ...           3         1   1      2\n","8  1033078      2         1          1  ...           1         1   5      2\n","9  1033078      4         2          1  ...           2         1   1      2\n","\n","[10 rows x 11 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"MBWrALfqOw0r","executionInfo":{"status":"ok","timestamp":1603268285624,"user_tz":-330,"elapsed":1369,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"144402f2-0a30-4def-b306-699bfad063ce","colab":{"base_uri":"https://localhost:8080/","height":216}},"source":["df.tail()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>Clump</th>\n","      <th>UnifSize</th>\n","      <th>UnifShape</th>\n","      <th>MargAdh</th>\n","      <th>SingEpiSize</th>\n","      <th>BareNuc</th>\n","      <th>BlandChrom</th>\n","      <th>NormNucl</th>\n","      <th>Mit</th>\n","      <th>Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>694</th>\n","      <td>776715</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>695</th>\n","      <td>841769</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>696</th>\n","      <td>888820</td>\n","      <td>5</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>3</td>\n","      <td>7</td>\n","      <td>3</td>\n","      <td>8</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>697</th>\n","      <td>897471</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>6</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>10</td>\n","      <td>6</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>698</th>\n","      <td>897471</td>\n","      <td>4</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>10</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         ID  Clump  UnifSize  UnifShape  ...  BlandChrom  NormNucl Mit  Class\n","694  776715      3         1          1  ...           1         1   1      2\n","695  841769      2         1          1  ...           1         1   1      2\n","696  888820      5        10         10  ...           8        10   2      4\n","697  897471      4         8          6  ...          10         6   1      4\n","698  897471      4         8          8  ...          10         4   1      4\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"na4KfFVFPJ9c","executionInfo":{"status":"ok","timestamp":1603268340276,"user_tz":-330,"elapsed":1476,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"d24e34e2-101b-413e-b127-eb00f64071d5","colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["df.shape"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(699, 11)"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"EE2i-rxkPXli","executionInfo":{"status":"ok","timestamp":1603268352192,"user_tz":-330,"elapsed":1463,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"ea5d6e4c-b38e-4753-9324-18e2a7f3fb97","colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["df.size"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["7689"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"pGjaOHZ7PaxK","executionInfo":{"status":"ok","timestamp":1603268363430,"user_tz":-330,"elapsed":1564,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"d95059da-60cd-42c5-fc86-71ab76f75c00","colab":{"base_uri":"https://localhost:8080/","height":217}},"source":["df.count()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ID             699\n","Clump          699\n","UnifSize       699\n","UnifShape      699\n","MargAdh        699\n","SingEpiSize    699\n","BareNuc        699\n","BlandChrom     699\n","NormNucl       699\n","Mit            699\n","Class          699\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"Xu1jZznRPcvR","executionInfo":{"status":"ok","timestamp":1603268388186,"user_tz":-330,"elapsed":1283,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"da24c70c-9361-4ed8-8285-c02d194c8c43","colab":{"base_uri":"https://localhost:8080/","height":67}},"source":["df['Class'].value_counts()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2    458\n","4    241\n","Name: Class, dtype: int64"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"vJOu123RPm81","executionInfo":{"status":"ok","timestamp":1603268605863,"user_tz":-330,"elapsed":1525,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"6ede01c0-7ebe-4e7c-d673-6aa10f2ff48b","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["bg_df=df[df['Class']==2][0:200]\n","ml_df=df[df['Class']==4][0:200]\n","help(bg_df.plot)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Help on PlotAccessor in module pandas.plotting._core object:\n","\n","class PlotAccessor(pandas.core.base.PandasObject)\n"," |  Make plots of Series or DataFrame.\n"," |  \n"," |  Uses the backend specified by the\n"," |  option ``plotting.backend``. By default, matplotlib is used.\n"," |  \n"," |  Parameters\n"," |  ----------\n"," |  data : Series or DataFrame\n"," |      The object for which the method is called.\n"," |  x : label or position, default None\n"," |      Only used if data is a DataFrame.\n"," |  y : label, position or list of label, positions, default None\n"," |      Allows plotting of one column versus another. Only used if data is a\n"," |      DataFrame.\n"," |  kind : str\n"," |      The kind of plot to produce:\n"," |  \n"," |      - 'line' : line plot (default)\n"," |      - 'bar' : vertical bar plot\n"," |      - 'barh' : horizontal bar plot\n"," |      - 'hist' : histogram\n"," |      - 'box' : boxplot\n"," |      - 'kde' : Kernel Density Estimation plot\n"," |      - 'density' : same as 'kde'\n"," |      - 'area' : area plot\n"," |      - 'pie' : pie plot\n"," |      - 'scatter' : scatter plot\n"," |      - 'hexbin' : hexbin plot.\n"," |  ax : matplotlib axes object, default None\n"," |      An axes of the current figure.\n"," |  subplots : bool, default False\n"," |      Make separate subplots for each column.\n"," |  sharex : bool, default True if ax is None else False\n"," |      In case ``subplots=True``, share x axis and set some x axis labels\n"," |      to invisible; defaults to True if ax is None otherwise False if\n"," |      an ax is passed in; Be aware, that passing in both an ax and\n"," |      ``sharex=True`` will alter all x axis labels for all axis in a figure.\n"," |  sharey : bool, default False\n"," |      In case ``subplots=True``, share y axis and set some y axis labels to invisible.\n"," |  layout : tuple, optional\n"," |      (rows, columns) for the layout of subplots.\n"," |  figsize : a tuple (width, height) in inches\n"," |      Size of a figure object.\n"," |  use_index : bool, default True\n"," |      Use index as ticks for x axis.\n"," |  title : str or list\n"," |      Title to use for the plot. If a string is passed, print the string\n"," |      at the top of the figure. If a list is passed and `subplots` is\n"," |      True, print each item in the list above the corresponding subplot.\n"," |  grid : bool, default None (matlab style default)\n"," |      Axis grid lines.\n"," |  legend : bool or {'reverse'}\n"," |      Place legend on axis subplots.\n"," |  style : list or dict\n"," |      The matplotlib line style per column.\n"," |  logx : bool or 'sym', default False\n"," |      Use log scaling or symlog scaling on x axis.\n"," |      .. versionchanged:: 0.25.0\n"," |  \n"," |  logy : bool or 'sym' default False\n"," |      Use log scaling or symlog scaling on y axis.\n"," |      .. versionchanged:: 0.25.0\n"," |  \n"," |  loglog : bool or 'sym', default False\n"," |      Use log scaling or symlog scaling on both x and y axes.\n"," |      .. versionchanged:: 0.25.0\n"," |  \n"," |  xticks : sequence\n"," |      Values to use for the xticks.\n"," |  yticks : sequence\n"," |      Values to use for the yticks.\n"," |  xlim : 2-tuple/list\n"," |      Set the x limits of the current axes.\n"," |  ylim : 2-tuple/list\n"," |      Set the y limits of the current axes.\n"," |  xlabel : label, optional\n"," |      Name to use for the xlabel on x-axis. Default uses index name as xlabel.\n"," |  \n"," |      .. versionadded:: 1.1.0\n"," |  \n"," |  ylabel : label, optional\n"," |      Name to use for the ylabel on y-axis. Default will show no ylabel.\n"," |  \n"," |      .. versionadded:: 1.1.0\n"," |  \n"," |  rot : int, default None\n"," |      Rotation for ticks (xticks for vertical, yticks for horizontal\n"," |      plots).\n"," |  fontsize : int, default None\n"," |      Font size for xticks and yticks.\n"," |  colormap : str or matplotlib colormap object, default None\n"," |      Colormap to select colors from. If string, load colormap with that\n"," |      name from matplotlib.\n"," |  colorbar : bool, optional\n"," |      If True, plot colorbar (only relevant for 'scatter' and 'hexbin'\n"," |      plots).\n"," |  position : float\n"," |      Specify relative alignments for bar plot layout.\n"," |      From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n"," |      (center).\n"," |  table : bool, Series or DataFrame, default False\n"," |      If True, draw a table using the data in the DataFrame and the data\n"," |      will be transposed to meet matplotlib's default layout.\n"," |      If a Series or DataFrame is passed, use passed data to draw a\n"," |      table.\n"," |  yerr : DataFrame, Series, array-like, dict and str\n"," |      See :ref:`Plotting with Error Bars <visualization.errorbars>` for\n"," |      detail.\n"," |  xerr : DataFrame, Series, array-like, dict and str\n"," |      Equivalent to yerr.\n"," |  stacked : bool, default False in line and bar plots, and True in area plot\n"," |      If True, create stacked plot.\n"," |  sort_columns : bool, default False\n"," |      Sort column names to determine plot ordering.\n"," |  secondary_y : bool or sequence, default False\n"," |      Whether to plot on the secondary y-axis if a list/tuple, which\n"," |      columns to plot on secondary y-axis.\n"," |  mark_right : bool, default True\n"," |      When using a secondary_y axis, automatically mark the column\n"," |      labels with \"(right)\" in the legend.\n"," |  include_bool : bool, default is False\n"," |      If True, boolean values can be plotted.\n"," |  backend : str, default None\n"," |      Backend to use instead of the backend specified in the option\n"," |      ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to\n"," |      specify the ``plotting.backend`` for the whole session, set\n"," |      ``pd.options.plotting.backend``.\n"," |  \n"," |      .. versionadded:: 1.0.0\n"," |  \n"," |  **kwargs\n"," |      Options to pass to matplotlib plotting method.\n"," |  \n"," |  Returns\n"," |  -------\n"," |  :class:`matplotlib.axes.Axes` or numpy.ndarray of them\n"," |      If the backend is not the default matplotlib one, the return value\n"," |      will be the object returned by the backend.\n"," |  \n"," |  Notes\n"," |  -----\n"," |  - See matplotlib documentation online for more on this subject\n"," |  - If `kind` = 'bar' or 'barh', you can specify relative alignments\n"," |    for bar plot layout by `position` keyword.\n"," |    From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n"," |    (center)\n"," |  \n"," |  Method resolution order:\n"," |      PlotAccessor\n"," |      pandas.core.base.PandasObject\n"," |      pandas.core.accessor.DirNamesMixin\n"," |      builtins.object\n"," |  \n"," |  Methods defined here:\n"," |  \n"," |  __call__(self, *args, **kwargs)\n"," |      Make plots of Series or DataFrame.\n"," |      \n"," |      Uses the backend specified by the\n"," |      option ``plotting.backend``. By default, matplotlib is used.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      data : Series or DataFrame\n"," |          The object for which the method is called.\n"," |      x : label or position, default None\n"," |          Only used if data is a DataFrame.\n"," |      y : label, position or list of label, positions, default None\n"," |          Allows plotting of one column versus another. Only used if data is a\n"," |          DataFrame.\n"," |      kind : str\n"," |          The kind of plot to produce:\n"," |      \n"," |          - 'line' : line plot (default)\n"," |          - 'bar' : vertical bar plot\n"," |          - 'barh' : horizontal bar plot\n"," |          - 'hist' : histogram\n"," |          - 'box' : boxplot\n"," |          - 'kde' : Kernel Density Estimation plot\n"," |          - 'density' : same as 'kde'\n"," |          - 'area' : area plot\n"," |          - 'pie' : pie plot\n"," |          - 'scatter' : scatter plot\n"," |          - 'hexbin' : hexbin plot.\n"," |      ax : matplotlib axes object, default None\n"," |          An axes of the current figure.\n"," |      subplots : bool, default False\n"," |          Make separate subplots for each column.\n"," |      sharex : bool, default True if ax is None else False\n"," |          In case ``subplots=True``, share x axis and set some x axis labels\n"," |          to invisible; defaults to True if ax is None otherwise False if\n"," |          an ax is passed in; Be aware, that passing in both an ax and\n"," |          ``sharex=True`` will alter all x axis labels for all axis in a figure.\n"," |      sharey : bool, default False\n"," |          In case ``subplots=True``, share y axis and set some y axis labels to invisible.\n"," |      layout : tuple, optional\n"," |          (rows, columns) for the layout of subplots.\n"," |      figsize : a tuple (width, height) in inches\n"," |          Size of a figure object.\n"," |      use_index : bool, default True\n"," |          Use index as ticks for x axis.\n"," |      title : str or list\n"," |          Title to use for the plot. If a string is passed, print the string\n"," |          at the top of the figure. If a list is passed and `subplots` is\n"," |          True, print each item in the list above the corresponding subplot.\n"," |      grid : bool, default None (matlab style default)\n"," |          Axis grid lines.\n"," |      legend : bool or {'reverse'}\n"," |          Place legend on axis subplots.\n"," |      style : list or dict\n"," |          The matplotlib line style per column.\n"," |      logx : bool or 'sym', default False\n"," |          Use log scaling or symlog scaling on x axis.\n"," |          .. versionchanged:: 0.25.0\n"," |      \n"," |      logy : bool or 'sym' default False\n"," |          Use log scaling or symlog scaling on y axis.\n"," |          .. versionchanged:: 0.25.0\n"," |      \n"," |      loglog : bool or 'sym', default False\n"," |          Use log scaling or symlog scaling on both x and y axes.\n"," |          .. versionchanged:: 0.25.0\n"," |      \n"," |      xticks : sequence\n"," |          Values to use for the xticks.\n"," |      yticks : sequence\n"," |          Values to use for the yticks.\n"," |      xlim : 2-tuple/list\n"," |          Set the x limits of the current axes.\n"," |      ylim : 2-tuple/list\n"," |          Set the y limits of the current axes.\n"," |      xlabel : label, optional\n"," |          Name to use for the xlabel on x-axis. Default uses index name as xlabel.\n"," |      \n"," |          .. versionadded:: 1.1.0\n"," |      \n"," |      ylabel : label, optional\n"," |          Name to use for the ylabel on y-axis. Default will show no ylabel.\n"," |      \n"," |          .. versionadded:: 1.1.0\n"," |      \n"," |      rot : int, default None\n"," |          Rotation for ticks (xticks for vertical, yticks for horizontal\n"," |          plots).\n"," |      fontsize : int, default None\n"," |          Font size for xticks and yticks.\n"," |      colormap : str or matplotlib colormap object, default None\n"," |          Colormap to select colors from. If string, load colormap with that\n"," |          name from matplotlib.\n"," |      colorbar : bool, optional\n"," |          If True, plot colorbar (only relevant for 'scatter' and 'hexbin'\n"," |          plots).\n"," |      position : float\n"," |          Specify relative alignments for bar plot layout.\n"," |          From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n"," |          (center).\n"," |      table : bool, Series or DataFrame, default False\n"," |          If True, draw a table using the data in the DataFrame and the data\n"," |          will be transposed to meet matplotlib's default layout.\n"," |          If a Series or DataFrame is passed, use passed data to draw a\n"," |          table.\n"," |      yerr : DataFrame, Series, array-like, dict and str\n"," |          See :ref:`Plotting with Error Bars <visualization.errorbars>` for\n"," |          detail.\n"," |      xerr : DataFrame, Series, array-like, dict and str\n"," |          Equivalent to yerr.\n"," |      stacked : bool, default False in line and bar plots, and True in area plot\n"," |          If True, create stacked plot.\n"," |      sort_columns : bool, default False\n"," |          Sort column names to determine plot ordering.\n"," |      secondary_y : bool or sequence, default False\n"," |          Whether to plot on the secondary y-axis if a list/tuple, which\n"," |          columns to plot on secondary y-axis.\n"," |      mark_right : bool, default True\n"," |          When using a secondary_y axis, automatically mark the column\n"," |          labels with \"(right)\" in the legend.\n"," |      include_bool : bool, default is False\n"," |          If True, boolean values can be plotted.\n"," |      backend : str, default None\n"," |          Backend to use instead of the backend specified in the option\n"," |          ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to\n"," |          specify the ``plotting.backend`` for the whole session, set\n"," |          ``pd.options.plotting.backend``.\n"," |      \n"," |          .. versionadded:: 1.0.0\n"," |      \n"," |      **kwargs\n"," |          Options to pass to matplotlib plotting method.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them\n"," |          If the backend is not the default matplotlib one, the return value\n"," |          will be the object returned by the backend.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      - See matplotlib documentation online for more on this subject\n"," |      - If `kind` = 'bar' or 'barh', you can specify relative alignments\n"," |        for bar plot layout by `position` keyword.\n"," |        From 0 (left/bottom-end) to 1 (right/top-end). Default is 0.5\n"," |        (center)\n"," |  \n"," |  __init__(self, data)\n"," |      Initialize self.  See help(type(self)) for accurate signature.\n"," |  \n"," |  area(self, x=None, y=None, **kwargs)\n"," |      Draw a stacked area plot.\n"," |      \n"," |      An area plot displays quantitative data visually.\n"," |      This function wraps the matplotlib area function.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      x : label or position, optional\n"," |          Coordinates for the X axis. By default uses the index.\n"," |      y : label or position, optional\n"," |          Column to plot. By default uses all columns.\n"," |      stacked : bool, default True\n"," |          Area plots are stacked by default. Set to False to create a\n"," |          unstacked plot.\n"," |      **kwargs\n"," |          Additional keyword arguments are documented in\n"," |          :meth:`DataFrame.plot`.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      matplotlib.axes.Axes or numpy.ndarray\n"," |          Area plot, or array of area plots if subplots is True.\n"," |      \n"," |      See Also\n"," |      --------\n"," |      DataFrame.plot : Make plots of DataFrame using matplotlib / pylab.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      Draw an area plot based on basic business metrics:\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> df = pd.DataFrame({\n"," |          ...     'sales': [3, 2, 3, 9, 10, 6],\n"," |          ...     'signups': [5, 5, 6, 12, 14, 13],\n"," |          ...     'visits': [20, 42, 28, 62, 81, 50],\n"," |          ... }, index=pd.date_range(start='2018/01/01', end='2018/07/01',\n"," |          ...                        freq='M'))\n"," |          >>> ax = df.plot.area()\n"," |      \n"," |      Area plots are stacked by default. To produce an unstacked plot,\n"," |      pass ``stacked=False``:\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> ax = df.plot.area(stacked=False)\n"," |      \n"," |      Draw an area plot for a single column:\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> ax = df.plot.area(y='sales')\n"," |      \n"," |      Draw with a different `x`:\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> df = pd.DataFrame({\n"," |          ...     'sales': [3, 2, 3],\n"," |          ...     'visits': [20, 42, 28],\n"," |          ...     'day': [1, 2, 3],\n"," |          ... })\n"," |          >>> ax = df.plot.area(x='day')\n"," |  \n"," |  bar(self, x=None, y=None, **kwargs)\n"," |      Vertical bar plot.\n"," |      \n"," |      A bar plot is a plot that presents categorical data with\n"," |      rectangular bars with lengths proportional to the values that they\n"," |      represent. A bar plot shows comparisons among discrete categories. One\n"," |      axis of the plot shows the specific categories being compared, and the\n"," |      other axis represents a measured value.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      x : label or position, optional\n"," |          Allows plotting of one column versus another. If not specified,\n"," |          the index of the DataFrame is used.\n"," |      y : label or position, optional\n"," |          Allows plotting of one column versus another. If not specified,\n"," |          all numerical columns are used.\n"," |      color : str, array_like, or dict, optional\n"," |          The color for each of the DataFrame's columns. Possible values are:\n"," |      \n"," |          - A single color string referred to by name, RGB or RGBA code,\n"," |              for instance 'red' or '#a98d19'.\n"," |      \n"," |          - A sequence of color strings referred to by name, RGB or RGBA\n"," |              code, which will be used for each column recursively. For\n"," |              instance ['green','yellow'] each column's bar will be filled in\n"," |              green or yellow, alternatively.\n"," |      \n"," |          - A dict of the form {column name : color}, so that each column will be\n"," |              colored accordingly. For example, if your columns are called `a` and\n"," |              `b`, then passing {'a': 'green', 'b': 'red'} will color bars for\n"," |              column `a` in green and bars for column `b` in red.\n"," |      \n"," |          .. versionadded:: 1.1.0\n"," |      \n"," |      **kwargs\n"," |          Additional keyword arguments are documented in\n"," |          :meth:`DataFrame.plot`.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      matplotlib.axes.Axes or np.ndarray of them\n"," |          An ndarray is returned with one :class:`matplotlib.axes.Axes`\n"," |          per column when ``subplots=True``.\n"," |      \n"," |              See Also\n"," |              --------\n"," |              DataFrame.plot.barh : Horizontal bar plot.\n"," |              DataFrame.plot : Make plots of a DataFrame.\n"," |              matplotlib.pyplot.bar : Make a bar plot with matplotlib.\n"," |      \n"," |              Examples\n"," |              --------\n"," |              Basic plot.\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> df = pd.DataFrame({'lab':['A', 'B', 'C'], 'val':[10, 30, 20]})\n"," |                  >>> ax = df.plot.bar(x='lab', y='val', rot=0)\n"," |      \n"," |              Plot a whole dataframe to a bar plot. Each column is assigned a\n"," |              distinct color, and each row is nested in a group along the\n"," |              horizontal axis.\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n"," |                  >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n"," |                  >>> index = ['snail', 'pig', 'elephant',\n"," |                  ...          'rabbit', 'giraffe', 'coyote', 'horse']\n"," |                  >>> df = pd.DataFrame({'speed': speed,\n"," |                  ...                    'lifespan': lifespan}, index=index)\n"," |                  >>> ax = df.plot.bar(rot=0)\n"," |      \n"," |              Plot stacked bar charts for the DataFrame\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> ax = df.plot.bar(stacked=True)\n"," |      \n"," |              Instead of nesting, the figure can be split by column with\n"," |              ``subplots=True``. In this case, a :class:`numpy.ndarray` of\n"," |              :class:`matplotlib.axes.Axes` are returned.\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> axes = df.plot.bar(rot=0, subplots=True)\n"," |                  >>> axes[1].legend(loc=2)  # doctest: +SKIP\n"," |      \n"," |              If you don't like the default colours, you can specify how you'd\n"," |              like each column to be colored.\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> axes = df.plot.bar(\n"," |                  ...     rot=0, subplots=True, color={\"speed\": \"red\", \"lifespan\": \"green\"}\n"," |                  ... )\n"," |                  >>> axes[1].legend(loc=2)  # doctest: +SKIP\n"," |      \n"," |              Plot a single column.\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> ax = df.plot.bar(y='speed', rot=0)\n"," |      \n"," |              Plot only selected categories for the DataFrame.\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> ax = df.plot.bar(x='lifespan', rot=0)\n"," |  \n"," |  barh(self, x=None, y=None, **kwargs)\n"," |      Make a horizontal bar plot.\n"," |      \n"," |      A horizontal bar plot is a plot that presents quantitative data with\n"," |      rectangular bars with lengths proportional to the values that they\n"," |      represent. A bar plot shows comparisons among discrete categories. One\n"," |      axis of the plot shows the specific categories being compared, and the\n"," |      other axis represents a measured value.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      x : label or position, optional\n"," |          Allows plotting of one column versus another. If not specified,\n"," |          the index of the DataFrame is used.\n"," |      y : label or position, optional\n"," |          Allows plotting of one column versus another. If not specified,\n"," |          all numerical columns are used.\n"," |      color : str, array_like, or dict, optional\n"," |          The color for each of the DataFrame's columns. Possible values are:\n"," |      \n"," |          - A single color string referred to by name, RGB or RGBA code,\n"," |              for instance 'red' or '#a98d19'.\n"," |      \n"," |          - A sequence of color strings referred to by name, RGB or RGBA\n"," |              code, which will be used for each column recursively. For\n"," |              instance ['green','yellow'] each column's bar will be filled in\n"," |              green or yellow, alternatively.\n"," |      \n"," |          - A dict of the form {column name : color}, so that each column will be\n"," |              colored accordingly. For example, if your columns are called `a` and\n"," |              `b`, then passing {'a': 'green', 'b': 'red'} will color bars for\n"," |              column `a` in green and bars for column `b` in red.\n"," |      \n"," |          .. versionadded:: 1.1.0\n"," |      \n"," |      **kwargs\n"," |          Additional keyword arguments are documented in\n"," |          :meth:`DataFrame.plot`.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      matplotlib.axes.Axes or np.ndarray of them\n"," |          An ndarray is returned with one :class:`matplotlib.axes.Axes`\n"," |          per column when ``subplots=True``.\n"," |      \n"," |              See Also\n"," |              --------\n"," |              DataFrame.plot.bar: Vertical bar plot.\n"," |              DataFrame.plot : Make plots of DataFrame using matplotlib.\n"," |              matplotlib.axes.Axes.bar : Plot a vertical bar plot using matplotlib.\n"," |      \n"," |              Examples\n"," |              --------\n"," |              Basic example\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> df = pd.DataFrame({'lab': ['A', 'B', 'C'], 'val': [10, 30, 20]})\n"," |                  >>> ax = df.plot.barh(x='lab', y='val')\n"," |      \n"," |              Plot a whole DataFrame to a horizontal bar plot\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n"," |                  >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n"," |                  >>> index = ['snail', 'pig', 'elephant',\n"," |                  ...          'rabbit', 'giraffe', 'coyote', 'horse']\n"," |                  >>> df = pd.DataFrame({'speed': speed,\n"," |                  ...                    'lifespan': lifespan}, index=index)\n"," |                  >>> ax = df.plot.barh()\n"," |      \n"," |              Plot stacked barh charts for the DataFrame\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> ax = df.plot.barh(stacked=True)\n"," |      \n"," |              We can specify colors for each column\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> ax = df.plot.barh(color={\"speed\": \"red\", \"lifespan\": \"green\"})\n"," |      \n"," |              Plot a column of the DataFrame to a horizontal bar plot\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n"," |                  >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n"," |                  >>> index = ['snail', 'pig', 'elephant',\n"," |                  ...          'rabbit', 'giraffe', 'coyote', 'horse']\n"," |                  >>> df = pd.DataFrame({'speed': speed,\n"," |                  ...                    'lifespan': lifespan}, index=index)\n"," |                  >>> ax = df.plot.barh(y='speed')\n"," |      \n"," |              Plot DataFrame versus the desired column\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> speed = [0.1, 17.5, 40, 48, 52, 69, 88]\n"," |                  >>> lifespan = [2, 8, 70, 1.5, 25, 12, 28]\n"," |                  >>> index = ['snail', 'pig', 'elephant',\n"," |                  ...          'rabbit', 'giraffe', 'coyote', 'horse']\n"," |                  >>> df = pd.DataFrame({'speed': speed,\n"," |                  ...                    'lifespan': lifespan}, index=index)\n"," |                  >>> ax = df.plot.barh(x='lifespan')\n"," |  \n"," |  box(self, by=None, **kwargs)\n"," |      Make a box plot of the DataFrame columns.\n"," |      \n"," |      A box plot is a method for graphically depicting groups of numerical\n"," |      data through their quartiles.\n"," |      The box extends from the Q1 to Q3 quartile values of the data,\n"," |      with a line at the median (Q2). The whiskers extend from the edges\n"," |      of box to show the range of the data. The position of the whiskers\n"," |      is set by default to 1.5*IQR (IQR = Q3 - Q1) from the edges of the\n"," |      box. Outlier points are those past the end of the whiskers.\n"," |      \n"," |      For further details see Wikipedia's\n"," |      entry for `boxplot <https://en.wikipedia.org/wiki/Box_plot>`__.\n"," |      \n"," |      A consideration when using this chart is that the box and the whiskers\n"," |      can overlap, which is very common when plotting small sets of data.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      by : str or sequence\n"," |          Column in the DataFrame to group by.\n"," |      **kwargs\n"," |          Additional keywords are documented in\n"," |          :meth:`DataFrame.plot`.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them\n"," |      \n"," |      See Also\n"," |      --------\n"," |      DataFrame.boxplot: Another method to draw a box plot.\n"," |      Series.plot.box: Draw a box plot from a Series object.\n"," |      matplotlib.pyplot.boxplot: Draw a box plot in matplotlib.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      Draw a box plot from a DataFrame with four columns of randomly\n"," |      generated data.\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> data = np.random.randn(25, 4)\n"," |          >>> df = pd.DataFrame(data, columns=list('ABCD'))\n"," |          >>> ax = df.plot.box()\n"," |  \n"," |  density = kde(self, bw_method=None, ind=None, **kwargs)\n"," |  \n"," |  hexbin(self, x, y, C=None, reduce_C_function=None, gridsize=None, **kwargs)\n"," |      Generate a hexagonal binning plot.\n"," |      \n"," |      Generate a hexagonal binning plot of `x` versus `y`. If `C` is `None`\n"," |      (the default), this is a histogram of the number of occurrences\n"," |      of the observations at ``(x[i], y[i])``.\n"," |      \n"," |      If `C` is specified, specifies values at given coordinates\n"," |      ``(x[i], y[i])``. These values are accumulated for each hexagonal\n"," |      bin and then reduced according to `reduce_C_function`,\n"," |      having as default the NumPy's mean function (:meth:`numpy.mean`).\n"," |      (If `C` is specified, it must also be a 1-D sequence\n"," |      of the same length as `x` and `y`, or a column label.)\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      x : int or str\n"," |          The column label or position for x points.\n"," |      y : int or str\n"," |          The column label or position for y points.\n"," |      C : int or str, optional\n"," |          The column label or position for the value of `(x, y)` point.\n"," |      reduce_C_function : callable, default `np.mean`\n"," |          Function of one argument that reduces all the values in a bin to\n"," |          a single number (e.g. `np.mean`, `np.max`, `np.sum`, `np.std`).\n"," |      gridsize : int or tuple of (int, int), default 100\n"," |          The number of hexagons in the x-direction.\n"," |          The corresponding number of hexagons in the y-direction is\n"," |          chosen in a way that the hexagons are approximately regular.\n"," |          Alternatively, gridsize can be a tuple with two elements\n"," |          specifying the number of hexagons in the x-direction and the\n"," |          y-direction.\n"," |      **kwargs\n"," |          Additional keyword arguments are documented in\n"," |          :meth:`DataFrame.plot`.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      matplotlib.AxesSubplot\n"," |          The matplotlib ``Axes`` on which the hexbin is plotted.\n"," |      \n"," |      See Also\n"," |      --------\n"," |      DataFrame.plot : Make plots of a DataFrame.\n"," |      matplotlib.pyplot.hexbin : Hexagonal binning plot using matplotlib,\n"," |          the matplotlib function that is used under the hood.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      The following examples are generated with random data from\n"," |      a normal distribution.\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> n = 10000\n"," |          >>> df = pd.DataFrame({'x': np.random.randn(n),\n"," |          ...                    'y': np.random.randn(n)})\n"," |          >>> ax = df.plot.hexbin(x='x', y='y', gridsize=20)\n"," |      \n"," |      The next example uses `C` and `np.sum` as `reduce_C_function`.\n"," |      Note that `'observations'` values ranges from 1 to 5 but the result\n"," |      plot shows values up to more than 25. This is because of the\n"," |      `reduce_C_function`.\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> n = 500\n"," |          >>> df = pd.DataFrame({\n"," |          ...     'coord_x': np.random.uniform(-3, 3, size=n),\n"," |          ...     'coord_y': np.random.uniform(30, 50, size=n),\n"," |          ...     'observations': np.random.randint(1,5, size=n)\n"," |          ...     })\n"," |          >>> ax = df.plot.hexbin(x='coord_x',\n"," |          ...                     y='coord_y',\n"," |          ...                     C='observations',\n"," |          ...                     reduce_C_function=np.sum,\n"," |          ...                     gridsize=10,\n"," |          ...                     cmap=\"viridis\")\n"," |  \n"," |  hist(self, by=None, bins=10, **kwargs)\n"," |      Draw one histogram of the DataFrame's columns.\n"," |      \n"," |      A histogram is a representation of the distribution of data.\n"," |      This function groups the values of all given Series in the DataFrame\n"," |      into bins and draws all bins in one :class:`matplotlib.axes.Axes`.\n"," |      This is useful when the DataFrame's Series are in a similar scale.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      by : str or sequence, optional\n"," |          Column in the DataFrame to group by.\n"," |      bins : int, default 10\n"," |          Number of histogram bins to be used.\n"," |      **kwargs\n"," |          Additional keyword arguments are documented in\n"," |          :meth:`DataFrame.plot`.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      class:`matplotlib.AxesSubplot`\n"," |          Return a histogram plot.\n"," |      \n"," |      See Also\n"," |      --------\n"," |      DataFrame.hist : Draw histograms per DataFrame's Series.\n"," |      Series.hist : Draw a histogram with Series' data.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      When we draw a dice 6000 times, we expect to get each value around 1000\n"," |      times. But when we draw two dices and sum the result, the distribution\n"," |      is going to be quite different. A histogram illustrates those\n"," |      distributions.\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> df = pd.DataFrame(\n"," |          ...     np.random.randint(1, 7, 6000),\n"," |          ...     columns = ['one'])\n"," |          >>> df['two'] = df['one'] + np.random.randint(1, 7, 6000)\n"," |          >>> ax = df.plot.hist(bins=12, alpha=0.5)\n"," |  \n"," |  kde(self, bw_method=None, ind=None, **kwargs)\n"," |      Generate Kernel Density Estimate plot using Gaussian kernels.\n"," |      \n"," |      In statistics, `kernel density estimation`_ (KDE) is a non-parametric\n"," |      way to estimate the probability density function (PDF) of a random\n"," |      variable. This function uses Gaussian kernels and includes automatic\n"," |      bandwidth determination.\n"," |      \n"," |      .. _kernel density estimation:\n"," |          https://en.wikipedia.org/wiki/Kernel_density_estimation\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      bw_method : str, scalar or callable, optional\n"," |          The method used to calculate the estimator bandwidth. This can be\n"," |          'scott', 'silverman', a scalar constant or a callable.\n"," |          If None (default), 'scott' is used.\n"," |          See :class:`scipy.stats.gaussian_kde` for more information.\n"," |      ind : NumPy array or int, optional\n"," |          Evaluation points for the estimated PDF. If None (default),\n"," |          1000 equally spaced points are used. If `ind` is a NumPy array, the\n"," |          KDE is evaluated at the points passed. If `ind` is an integer,\n"," |          `ind` number of equally spaced points are used.\n"," |      **kwargs\n"," |          Additional keyword arguments are documented in\n"," |          :meth:`pandas.%(this-datatype)s.plot`.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      matplotlib.axes.Axes or numpy.ndarray of them\n"," |      \n"," |      See Also\n"," |      --------\n"," |      scipy.stats.gaussian_kde : Representation of a kernel-density\n"," |          estimate using Gaussian kernels. This is the function used\n"," |          internally to estimate the PDF.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      Given a Series of points randomly sampled from an unknown\n"," |      distribution, estimate its PDF using KDE with automatic\n"," |      bandwidth determination and plot the results, evaluating them at\n"," |      1000 equally spaced points (default):\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> s = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])\n"," |          >>> ax = s.plot.kde()\n"," |      \n"," |      A scalar bandwidth can be specified. Using a small bandwidth value can\n"," |      lead to over-fitting, while using a large bandwidth value may result\n"," |      in under-fitting:\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> ax = s.plot.kde(bw_method=0.3)\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> ax = s.plot.kde(bw_method=3)\n"," |      \n"," |      Finally, the `ind` parameter determines the evaluation points for the\n"," |      plot of the estimated PDF:\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> ax = s.plot.kde(ind=[1, 2, 3, 4, 5])\n"," |      \n"," |      For DataFrame, it works in the same way:\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> df = pd.DataFrame({\n"," |          ...     'x': [1, 2, 2.5, 3, 3.5, 4, 5],\n"," |          ...     'y': [4, 4, 4.5, 5, 5.5, 6, 6],\n"," |          ... })\n"," |          >>> ax = df.plot.kde()\n"," |      \n"," |      A scalar bandwidth can be specified. Using a small bandwidth value can\n"," |      lead to over-fitting, while using a large bandwidth value may result\n"," |      in under-fitting:\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> ax = df.plot.kde(bw_method=0.3)\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> ax = df.plot.kde(bw_method=3)\n"," |      \n"," |      Finally, the `ind` parameter determines the evaluation points for the\n"," |      plot of the estimated PDF:\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> ax = df.plot.kde(ind=[1, 2, 3, 4, 5, 6])\n"," |  \n"," |  line(self, x=None, y=None, **kwargs)\n"," |      Plot Series or DataFrame as lines.\n"," |      \n"," |      This function is useful to plot lines using DataFrame's values\n"," |      as coordinates.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      x : label or position, optional\n"," |          Allows plotting of one column versus another. If not specified,\n"," |          the index of the DataFrame is used.\n"," |      y : label or position, optional\n"," |          Allows plotting of one column versus another. If not specified,\n"," |          all numerical columns are used.\n"," |      color : str, array_like, or dict, optional\n"," |          The color for each of the DataFrame's columns. Possible values are:\n"," |      \n"," |          - A single color string referred to by name, RGB or RGBA code,\n"," |              for instance 'red' or '#a98d19'.\n"," |      \n"," |          - A sequence of color strings referred to by name, RGB or RGBA\n"," |              code, which will be used for each column recursively. For\n"," |              instance ['green','yellow'] each column's line will be filled in\n"," |              green or yellow, alternatively.\n"," |      \n"," |          - A dict of the form {column name : color}, so that each column will be\n"," |              colored accordingly. For example, if your columns are called `a` and\n"," |              `b`, then passing {'a': 'green', 'b': 'red'} will color lines for\n"," |              column `a` in green and lines for column `b` in red.\n"," |      \n"," |          .. versionadded:: 1.1.0\n"," |      \n"," |      **kwargs\n"," |          Additional keyword arguments are documented in\n"," |          :meth:`DataFrame.plot`.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      matplotlib.axes.Axes or np.ndarray of them\n"," |          An ndarray is returned with one :class:`matplotlib.axes.Axes`\n"," |          per column when ``subplots=True``.\n"," |      \n"," |              See Also\n"," |              --------\n"," |              matplotlib.pyplot.plot : Plot y versus x as lines and/or markers.\n"," |      \n"," |              Examples\n"," |              --------\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  >>> s = pd.Series([1, 3, 2])\n"," |                  >>> s.plot.line()\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  The following example shows the populations for some animals\n"," |                  over the years.\n"," |      \n"," |                  >>> df = pd.DataFrame({\n"," |                  ...    'pig': [20, 18, 489, 675, 1776],\n"," |                  ...    'horse': [4, 25, 281, 600, 1900]\n"," |                  ...    }, index=[1990, 1997, 2003, 2009, 2014])\n"," |                  >>> lines = df.plot.line()\n"," |      \n"," |              .. plot::\n"," |                 :context: close-figs\n"," |      \n"," |                 An example with subplots, so an array of axes is returned.\n"," |      \n"," |                 >>> axes = df.plot.line(subplots=True)\n"," |                 >>> type(axes)\n"," |                 <class 'numpy.ndarray'>\n"," |      \n"," |              .. plot::\n"," |                 :context: close-figs\n"," |      \n"," |                 Let's repeat the same example, but specifying colors for\n"," |                 each column (in this case, for each animal).\n"," |      \n"," |                 >>> axes = df.plot.line(\n"," |                 ...     subplots=True, color={\"pig\": \"pink\", \"horse\": \"#742802\"}\n"," |                 ... )\n"," |      \n"," |              .. plot::\n"," |                  :context: close-figs\n"," |      \n"," |                  The following example shows the relationship between both\n"," |                  populations.\n"," |      \n"," |                  >>> lines = df.plot.line(x='pig', y='horse')\n"," |  \n"," |  pie(self, **kwargs)\n"," |      Generate a pie plot.\n"," |      \n"," |      A pie plot is a proportional representation of the numerical data in a\n"," |      column. This function wraps :meth:`matplotlib.pyplot.pie` for the\n"," |      specified column. If no column reference is passed and\n"," |      ``subplots=True`` a pie plot is drawn for each numerical column\n"," |      independently.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      y : int or label, optional\n"," |          Label or position of the column to plot.\n"," |          If not provided, ``subplots=True`` argument must be passed.\n"," |      **kwargs\n"," |          Keyword arguments to pass on to :meth:`DataFrame.plot`.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      matplotlib.axes.Axes or np.ndarray of them\n"," |          A NumPy array is returned when `subplots` is True.\n"," |      \n"," |      See Also\n"," |      --------\n"," |      Series.plot.pie : Generate a pie plot for a Series.\n"," |      DataFrame.plot : Make plots of a DataFrame.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      In the example below we have a DataFrame with the information about\n"," |      planet's mass and radius. We pass the 'mass' column to the\n"," |      pie function to get a pie plot.\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> df = pd.DataFrame({'mass': [0.330, 4.87 , 5.97],\n"," |          ...                    'radius': [2439.7, 6051.8, 6378.1]},\n"," |          ...                   index=['Mercury', 'Venus', 'Earth'])\n"," |          >>> plot = df.plot.pie(y='mass', figsize=(5, 5))\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> plot = df.plot.pie(subplots=True, figsize=(11, 6))\n"," |  \n"," |  scatter(self, x, y, s=None, c=None, **kwargs)\n"," |      Create a scatter plot with varying marker point size and color.\n"," |      \n"," |      The coordinates of each point are defined by two dataframe columns and\n"," |      filled circles are used to represent each point. This kind of plot is\n"," |      useful to see complex correlations between two variables. Points could\n"," |      be for instance natural 2D coordinates like longitude and latitude in\n"," |      a map or, in general, any pair of metrics that can be plotted against\n"," |      each other.\n"," |      \n"," |      Parameters\n"," |      ----------\n"," |      x : int or str\n"," |          The column name or column position to be used as horizontal\n"," |          coordinates for each point.\n"," |      y : int or str\n"," |          The column name or column position to be used as vertical\n"," |          coordinates for each point.\n"," |      s : str, scalar or array_like, optional\n"," |          The size of each point. Possible values are:\n"," |      \n"," |          - A string with the name of the column to be used for marker's size.\n"," |      \n"," |          - A single scalar so all points have the same size.\n"," |      \n"," |          - A sequence of scalars, which will be used for each point's size\n"," |            recursively. For instance, when passing [2,14] all points size\n"," |            will be either 2 or 14, alternatively.\n"," |      \n"," |            .. versionchanged:: 1.1.0\n"," |      \n"," |      c : str, int or array_like, optional\n"," |          The color of each point. Possible values are:\n"," |      \n"," |          - A single color string referred to by name, RGB or RGBA code,\n"," |            for instance 'red' or '#a98d19'.\n"," |      \n"," |          - A sequence of color strings referred to by name, RGB or RGBA\n"," |            code, which will be used for each point's color recursively. For\n"," |            instance ['green','yellow'] all points will be filled in green or\n"," |            yellow, alternatively.\n"," |      \n"," |          - A column name or position whose values will be used to color the\n"," |            marker points according to a colormap.\n"," |      \n"," |      **kwargs\n"," |          Keyword arguments to pass on to :meth:`DataFrame.plot`.\n"," |      \n"," |      Returns\n"," |      -------\n"," |      :class:`matplotlib.axes.Axes` or numpy.ndarray of them\n"," |      \n"," |      See Also\n"," |      --------\n"," |      matplotlib.pyplot.scatter : Scatter plot using multiple input data\n"," |          formats.\n"," |      \n"," |      Examples\n"," |      --------\n"," |      Let's see how to draw a scatter plot using coordinates from the values\n"," |      in a DataFrame's columns.\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> df = pd.DataFrame([[5.1, 3.5, 0], [4.9, 3.0, 0], [7.0, 3.2, 1],\n"," |          ...                    [6.4, 3.2, 1], [5.9, 3.0, 2]],\n"," |          ...                   columns=['length', 'width', 'species'])\n"," |          >>> ax1 = df.plot.scatter(x='length',\n"," |          ...                       y='width',\n"," |          ...                       c='DarkBlue')\n"," |      \n"," |      And now with the color determined by a column as well.\n"," |      \n"," |      .. plot::\n"," |          :context: close-figs\n"," |      \n"," |          >>> ax2 = df.plot.scatter(x='length',\n"," |          ...                       y='width',\n"," |          ...                       c='species',\n"," |          ...                       colormap='viridis')\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from pandas.core.base.PandasObject:\n"," |  \n"," |  __repr__(self) -> str\n"," |      Return a string representation for a particular object.\n"," |  \n"," |  __sizeof__(self)\n"," |      Generates the total memory usage for an object that returns\n"," |      either a value or Series of values\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data and other attributes inherited from pandas.core.base.PandasObject:\n"," |  \n"," |  __annotations__ = {'_cache': typing.Dict[str, typing.Any]}\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Methods inherited from pandas.core.accessor.DirNamesMixin:\n"," |  \n"," |  __dir__(self)\n"," |      Provide method name lookup and completion.\n"," |      \n"," |      Notes\n"," |      -----\n"," |      Only provide 'public' methods.\n"," |  \n"," |  ----------------------------------------------------------------------\n"," |  Data descriptors inherited from pandas.core.accessor.DirNamesMixin:\n"," |  \n"," |  __dict__\n"," |      dictionary for instance variables (if defined)\n"," |  \n"," |  __weakref__\n"," |      list of weak references to the object (if defined)\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RT7KwDmFQbdY","executionInfo":{"status":"ok","timestamp":1603269280038,"user_tz":-330,"elapsed":1283,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"1642865e-a4e4-47a4-8267-309d1a7cc8a7","colab":{"base_uri":"https://localhost:8080/","height":296}},"source":["axes = bg_df.plot(kind='scatter',x='Clump', y='UnifSize',color='blue',label='Beign')\n","ml_df.plot(kind='scatter',x='Clump', y='UnifSize',color='red',label='Malignant', ax=axes) "],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fcb7b860710>"]},"metadata":{"tags":[]},"execution_count":32},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"lP5NIW28TFNr","executionInfo":{"status":"ok","timestamp":1603269331069,"user_tz":-330,"elapsed":1093,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"9971f13a-31a8-45c7-f0ca-5cc7f7e4ac8b","colab":{"base_uri":"https://localhost:8080/","height":217}},"source":["df.dtypes"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ID              int64\n","Clump           int64\n","UnifSize        int64\n","UnifShape       int64\n","MargAdh         int64\n","SingEpiSize     int64\n","BareNuc        object\n","BlandChrom      int64\n","NormNucl        int64\n","Mit             int64\n","Class           int64\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"id":"C7jHaANZTKDy","executionInfo":{"status":"ok","timestamp":1603269530323,"user_tz":-330,"elapsed":1303,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"72151d67-1540-487f-eb36-d6d9338a9883","colab":{"base_uri":"https://localhost:8080/","height":217}},"source":["df= df[pd.to_numeric(df['BareNuc'], errors='coerce').notnull()]\n","df['BareNuc']=df['BareNuc'].astype('int')\n","df.dtypes"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["ID             int64\n","Clump          int64\n","UnifSize       int64\n","UnifShape      int64\n","MargAdh        int64\n","SingEpiSize    int64\n","BareNuc        int64\n","BlandChrom     int64\n","NormNucl       int64\n","Mit            int64\n","Class          int64\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"1wgTs5tXT67c","executionInfo":{"status":"ok","timestamp":1603269550706,"user_tz":-330,"elapsed":1282,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"45e13b3f-bee0-4b9d-b28b-3aa9f9fa1e31","colab":{"base_uri":"https://localhost:8080/","height":67}},"source":["df.columns"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['ID', 'Clump', 'UnifSize', 'UnifShape', 'MargAdh', 'SingEpiSize',\n","       'BareNuc', 'BlandChrom', 'NormNucl', 'Mit', 'Class'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"jsEZgs9dUBdQ","executionInfo":{"status":"ok","timestamp":1603269774170,"user_tz":-330,"elapsed":1065,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"42b372cc-8334-4f48-94a2-e0050a4ba16e","colab":{"base_uri":"https://localhost:8080/","height":100}},"source":["feature_df=df[['Clump', 'UnifSize', 'UnifShape', 'MargAdh', 'SingEpiSize','BareNuc', 'BlandChrom', 'NormNucl', 'Mit']]\n","X=np.asarray(feature_df)\n","y=np.asarray(df['Class'])\n","\n","X[0:5]"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 5,  1,  1,  1,  2,  1,  3,  1,  1],\n","       [ 5,  4,  4,  5,  7, 10,  3,  2,  1],\n","       [ 3,  1,  1,  1,  2,  2,  3,  1,  1],\n","       [ 6,  8,  8,  1,  3,  4,  3,  7,  1],\n","       [ 4,  1,  1,  3,  2,  1,  3,  1,  1]])"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"0rbP6J5kU1Fh","executionInfo":{"status":"ok","timestamp":1603269778950,"user_tz":-330,"elapsed":728,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"2b4fe9ab-32fd-48e8-fde4-10de5bc053cc","colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["y[0:5]"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 2, 2, 2, 2])"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"id":"VtkqWP-lU2RZ","executionInfo":{"status":"ok","timestamp":1603269905719,"user_tz":-330,"elapsed":1156,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}}},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=4)"],"execution_count":43,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qv6O1sqUVWmY","executionInfo":{"status":"ok","timestamp":1603270045594,"user_tz":-330,"elapsed":1078,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"4a17701a-4600-4438-fe8a-9340313496ec","colab":{"base_uri":"https://localhost:8080/","height":84}},"source":["print(X_train.shape)\n","print(y_train.shape)\n","print(X_test.shape)\n","print(y_test.shape)"],"execution_count":48,"outputs":[{"output_type":"stream","text":["(546, 9)\n","(546,)\n","(137, 9)\n","(137,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9B8EXX92VaJN","executionInfo":{"status":"ok","timestamp":1603270237193,"user_tz":-330,"elapsed":1125,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}}},"source":["from sklearn import svm\n","classifier=svm.SVC(kernel='linear', gamma='auto', C=2)\n","classifier.fit(X_train, y_train)\n","y_predict=classifier.predict(X_test)"],"execution_count":55,"outputs":[]},{"cell_type":"code","metadata":{"id":"ifhNFZ_ZVgi7","executionInfo":{"status":"ok","timestamp":1603270315621,"user_tz":-330,"elapsed":1110,"user":{"displayName":"SHREY ARORA","photoUrl":"","userId":"10548180523723076734"}},"outputId":"ac41102e-4171-46e7-a285-a28b06fa6e29","colab":{"base_uri":"https://localhost:8080/","height":167}},"source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test,y_predict))"],"execution_count":56,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           2       1.00      0.94      0.97        90\n","           4       0.90      1.00      0.95        47\n","\n","    accuracy                           0.96       137\n","   macro avg       0.95      0.97      0.96       137\n","weighted avg       0.97      0.96      0.96       137\n","\n"],"name":"stdout"}]}]}